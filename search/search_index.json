{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This is a low level api client, it just connects the exchange api with your python code in the most simple way. Over this library, you can build your awesome applications or high level api. Check the official documentation https://exchange-docs.crypto.com/ and the examples directory. Features This library is optimized to be small, fast and secure. Fully tested: 100% code coverage Simple: It just does one thing, but it does it right Fast: Relies on asyncio so latency and memory usage is near zero (much better than threading or multiprocessing) No forced dependencies: Just websockets and orjson . No super modern cool features that you probably don't want Getting started There are two kinds of apis , the user and market . The user type requires providing api credentials (access and secret key) Before using the library, you have to install it: pip install crypto_com_client The most simple example, subscribing to an orderbook : from crypto_com.crypto_com import MarketClient import asyncio import logging logging.basicConfig(level=logging.INFO) async def run(): async with MarketClient() as client: await client.subscribe([\"book.CRO_USDC.10\"]) while True: event = await client.next_event() print(event) if __name__ == \"__main__\": loop = asyncio.get_event_loop() loop.run_until_complete(run()) If you want to use the user api first get you api key and secret . from crypto_com import UserClient import asyncio import os import logging logging.basicConfig(level=logging.INFO) async def run(): async with UserClient( api_key=os.environ[\"API_KEY\"], api_secret=os.environ[\"API_SECRET\"] ) as client: await client.send( client.build_message( method=\"private/get-open-orders\", params={ \"instrument_name\": \"CRO_USDC\", \"page_size\": 10, \"page\": 0 } ) ) event = await client.next_event() print(event) if __name__ == \"__main__\": loop = asyncio.get_event_loop() loop.run_until_complete(run()) With these two examples you can use the whole api. Just check the API documentation to know the different methods and parameters. Contributing If you have any suggestion, detect any bug or want any feature, please open an issue so we can discuss it.","title":"Introduction"},{"location":"#introduction","text":"This is a low level api client, it just connects the exchange api with your python code in the most simple way. Over this library, you can build your awesome applications or high level api. Check the official documentation https://exchange-docs.crypto.com/ and the examples directory.","title":"Introduction"},{"location":"#features","text":"This library is optimized to be small, fast and secure. Fully tested: 100% code coverage Simple: It just does one thing, but it does it right Fast: Relies on asyncio so latency and memory usage is near zero (much better than threading or multiprocessing) No forced dependencies: Just websockets and orjson . No super modern cool features that you probably don't want","title":"Features"},{"location":"#getting-started","text":"There are two kinds of apis , the user and market . The user type requires providing api credentials (access and secret key) Before using the library, you have to install it: pip install crypto_com_client The most simple example, subscribing to an orderbook : from crypto_com.crypto_com import MarketClient import asyncio import logging logging.basicConfig(level=logging.INFO) async def run(): async with MarketClient() as client: await client.subscribe([\"book.CRO_USDC.10\"]) while True: event = await client.next_event() print(event) if __name__ == \"__main__\": loop = asyncio.get_event_loop() loop.run_until_complete(run()) If you want to use the user api first get you api key and secret . from crypto_com import UserClient import asyncio import os import logging logging.basicConfig(level=logging.INFO) async def run(): async with UserClient( api_key=os.environ[\"API_KEY\"], api_secret=os.environ[\"API_SECRET\"] ) as client: await client.send( client.build_message( method=\"private/get-open-orders\", params={ \"instrument_name\": \"CRO_USDC\", \"page_size\": 10, \"page\": 0 } ) ) event = await client.next_event() print(event) if __name__ == \"__main__\": loop = asyncio.get_event_loop() loop.run_until_complete(run()) With these two examples you can use the whole api. Just check the API documentation to know the different methods and parameters.","title":"Getting started"},{"location":"#contributing","text":"If you have any suggestion, detect any bug or want any feature, please open an issue so we can discuss it.","title":"Contributing"},{"location":"market_client/","text":"Market Client You can use this client to perform private actions. You can get you balance, the status of your orders, create or cancel orders... In this example we are subscribing to the CRO order book from crypto_com.crypto_com import MarketClient import asyncio import logging logging.basicConfig(level=logging.INFO) async def run(): async with MarketClient() as client: await client.subscribe([\"book.CRO_USDC.10\"]) while True: event = await client.next_event() print(event) if __name__ == \"__main__\": loop = asyncio.get_event_loop() loop.run_until_complete(run()) You can get all public methods in the official documentation","title":"Market Client"},{"location":"market_client/#market-client","text":"You can use this client to perform private actions. You can get you balance, the status of your orders, create or cancel orders... In this example we are subscribing to the CRO order book from crypto_com.crypto_com import MarketClient import asyncio import logging logging.basicConfig(level=logging.INFO) async def run(): async with MarketClient() as client: await client.subscribe([\"book.CRO_USDC.10\"]) while True: event = await client.next_event() print(event) if __name__ == \"__main__\": loop = asyncio.get_event_loop() loop.run_until_complete(run()) You can get all public methods in the official documentation","title":"Market Client"},{"location":"user_client/","text":"User Client You can use this client to access the public data. You can subscribe to tickers, trades... In this example we are creating an order, and the listing open orders. from crypto_com import UserClient import asyncio import os import logging logging.basicConfig(level=logging.INFO) async def run(): async with UserClient( api_key=os.environ[\"API_KEY\"], api_secret=os.environ[\"API_SECRET\"] ) as client: await client.send( client.build_message( method=\"private/create-order\", params={ \"instrument_name\": \"CRO_USDC\", \"side\": \"BUY\", \"type\": \"LIMIT\", \"price\": 0.1233, \"quantity\": 5, } ) ) event = await client.next_event() print(event) # await client.send( client.build_message( method=\"private/get-open-orders\", params={ \"instrument_name\": \"CRO_USDC\", \"page_size\": 10, \"page\": 0 } ) ) event = await client.next_event() print(event) if __name__ == \"__main__\": loop = asyncio.get_event_loop() loop.run_until_complete(run()) You can get all private methods in the official documentation","title":"User Client"},{"location":"user_client/#user-client","text":"You can use this client to access the public data. You can subscribe to tickers, trades... In this example we are creating an order, and the listing open orders. from crypto_com import UserClient import asyncio import os import logging logging.basicConfig(level=logging.INFO) async def run(): async with UserClient( api_key=os.environ[\"API_KEY\"], api_secret=os.environ[\"API_SECRET\"] ) as client: await client.send( client.build_message( method=\"private/create-order\", params={ \"instrument_name\": \"CRO_USDC\", \"side\": \"BUY\", \"type\": \"LIMIT\", \"price\": 0.1233, \"quantity\": 5, } ) ) event = await client.next_event() print(event) # await client.send( client.build_message( method=\"private/get-open-orders\", params={ \"instrument_name\": \"CRO_USDC\", \"page_size\": 10, \"page\": 0 } ) ) event = await client.next_event() print(event) if __name__ == \"__main__\": loop = asyncio.get_event_loop() loop.run_until_complete(run()) You can get all private methods in the official documentation","title":"User Client"}]}